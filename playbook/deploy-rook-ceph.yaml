---
- name: Deploy the rook ceph operator and cluster
  tags:
  - deploy
  hosts: initkubmaster
  become: true
  gather_facts: no
  tasks:
  - name: Include vars from vars.yaml
    include_vars:
      file: vars.yaml
  - name: Copy crds manifest
    copy:
      src: ../manifests/rook-ceph/crds.yaml
      dest: /tmp/rook-ceph-crds.yaml
  - name: Copy common manifest
    copy:
      src: ../manifests/rook-ceph/common.yaml
      dest: /tmp/rook-ceph-common.yaml
  - name: Copy operator manifest
    copy:
      src: ../manifests/rook-ceph/operator.yaml
      dest: /tmp/rook-ceph-operator.yaml
  - name: Deploy manifests
    become: true
    become_user: "{{ kubectl_user }}"
    shell: "kubectl apply -f /tmp/rook-ceph-crds.yaml -f /tmp/rook-ceph-common.yaml -f /tmp/rook-ceph-operator.yaml"
    register: rook_ceph_operator_deployment_result
  - name: Show operator deployment result
    debug:
      msg: "{{ rook_ceph_operator_deployment_result }}"
  - name: Verify the operator is in the `Running` state
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl -l app=rook-ceph-operator -n rook-ceph get pod -o jsonpath='{.items[*].status.containerStatuses[*].ready}'"
    register: rook_ceph_operator_status
    until: rook_ceph_operator_status.stdout_lines[0] == "true"
    retries: 10
    delay: 10
  - name: Show operator status
    debug:
      msg: "{{ rook_ceph_operator_status.stdout_lines }}"
  - name: Template cluster manifest
    template:
      src: ../manifests/rook-ceph/cluster.yaml.tmpl
      dest: /tmp/rook-ceph-cluster.yaml
  - name: Copy toolbox manifest
    copy:
      src: ../manifests/rook-ceph/toolbox.yaml
      dest: /tmp/rook-ceph-toolbox.yaml
  - name: Deploy cluster and toolbox manifests
    become: true
    become_user: "{{ kubectl_user }}"
    shell: "kubectl apply -f /tmp/rook-ceph-cluster.yaml -f /tmp/rook-ceph-toolbox.yaml"
    register: rook_ceph_cluster_toolbox_deployment_result
  - name: Show cluster and toolbox deployment result
    debug:
      msg: "{{ rook_ceph_cluster_toolbox_deployment_result }}"

- name: Verify deployment
  tags:
    - verify_cluster
  hosts: initkubmaster
  become: true
  gather_facts: no
  tasks:
  - name: Include vars from vars.yaml
    include_vars:
      file: vars.yaml
  - name: Verify all rook-ceph pods are in the `Ready` state
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl -n rook-ceph get pod -o jsonpath='{.items[*].status.containerStatuses[*].ready}' --field-selector=status.phase!=Succeeded"
    register: rook_ceph_pods_status
    until: 'rook_ceph_pods_status.stdout_lines[0] is match("^true\s[true\s]*true$")'
    retries: 10
    delay: 10
  - name: Display rook-ceph pods state verification output
    debug:
      var: rook_ceph_pods_status.stdout_lines[0]
  - name: Verify ceph cluster health status is 'HEALTH_OK'
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl exec -n rook-ceph --stdin --tty rook-ceph-tools-f579cb58c-g9t65 -- ceph health"
    register: rook_cluster_health_status
    until: 'rook_cluster_health_status.stdout_lines[0] == "HEALTH_OK"'
    retries: 10
    delay: 10
  - name: Display ceph cluster health status verification output
    debug:
      var: rook_cluster_health_status.stdout_lines[0]

- name: Deploy Block Pool and Block Storage Class
  tags:
    - block_storage
  hosts: initkubmaster
  become: true
  gather_facts: no
  tasks:
  - name: Include vars from vars.yaml
    include_vars:
      file: vars.yaml
  - debug:
      var: rook_ceph.block_storage
  - name: Template block pool manifest
    template:
      src: ../manifests/rook-ceph/blockpool.yaml.tmpl
      dest: /tmp/rook-ceph-blockpool.yaml
  - name: Template block storage class manifest
    template:
      src: ../manifests/rook-ceph/blockstorageclass.yaml.tmpl
      dest: /tmp/rook-ceph-blockstorageclass.yaml
  - name: Deploy pool and storageclass manifests
    become: true
    become_user: "{{ kubectl_user }}"
    shell: "kubectl apply -f /tmp/rook-ceph-blockpool.yaml -f /tmp/rook-ceph-blockstorageclass.yaml"
    register: rook_ceph_block_storage_deployment_result
  - name: Show block storage deployment result
    debug:
      msg: "{{ rook_ceph_block_storage_deployment_result }}"

- name: Verify block storage
  tags:
    - verify_block_storage
  hosts: initkubmaster
  become: true
  gather_facts: no
  tasks:
  - name: Include vars from vars.yaml
    include_vars:
      file: vars.yaml
  - debug:
      var: rook_ceph.block_storage
  - name: Verify block storage pool exists
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl get CephBlockPool {{rook_ceph.block_storage.pool.metadata.name | default('blockpool')}} -n rook-ceph -o name"
    register: block_pool_status
    until: 'block_pool_status.stdout_lines | length == 1'
    retries: 1
    delay: 10
  - name: Display block storage pool existence verification output
    debug:
      var: block_pool_status.stdout_lines
  - name: Verify block storage class exists
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl get StorageClass {{rook_ceph.block_storage.storage_class.metadata.name | default('rook-ceph-block')}} -o name"
    register: block_storage_class_status
    until: 'block_storage_class_status.stdout_lines | length == 1'
    retries: 1
    delay: 10
  - name: Display block storage class existence verification output
    debug:
      var: block_storage_class_status.stdout_lines
  - name: Template test PVC manifest
    template:
      src: ../manifests/rook-ceph/blockstoragetestpvc.yaml.tmpl
      dest: /tmp/rook-ceph-blockstoragetestpvc.yaml
  - name: Apply test PVC manifest
    become: true
    become_user: "{{ kubectl_user }}"
    shell: "kubectl apply -f /tmp/rook-ceph-blockstoragetestpvc.yaml"
    register: block_storage_test_pvc_manifest_application_result
  - name: Show btest PVC manifest application result
    debug:
      msg: "{{ block_storage_test_pvc_manifest_application_result }}"
  - name: Verify test PVC in the `Bound` state
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl get pvc rook-ceph-block-test-pv-claim -o jsonpath='{.status.phase}'"
    register: rook_ceph_block_test_pvc_status_phase
    until: 'rook_ceph_block_test_pvc_status_phase.stdout_lines[0] == "Bound"'
    retries: 5
    delay: 10
  - name: Delete test PVC 
    become: true
    become_user: "{{ kubectl_user }}"
    shell: "kubectl delete -f /tmp/rook-ceph-blockstoragetestpvc.yaml"

- name: Configure dashboard istio https ingress
  tags: dashboard-istio-https-ingress
  hosts: initkubmaster
  become: true
  gather_facts: False
  tasks:
  - name: Include vars from vars.yaml
    include_vars:
      file: vars.yaml
  - name: Template ingress manifest
    template:
      src: ../manifests/rook-ceph/dashboard-istio-https-ingress.tmpl.yaml
      dest: "/tmp/rook-ceph-dashboard-istio-https-ingress.yaml"
    when: rook_ceph.dashboard.istioHttpsIngress.enabled | default(false) | bool
  - name: Ensure ingress manifest is applied
    become: true
    become_user: "{{ kubectl_user }}"
    command: kubectl apply -f /tmp/rook-ceph-dashboard-istio-https-ingress.yaml
    register: ingress_manifest_application_result
    when: rook_ceph.dashboard.istioHttpsIngress.enabled | default(false) | bool
  - name: Show ingress manifest application result
    debug:
      msg: "{{ ingress_manifest_application_result }}"
    when: rook_ceph.dashboard.istioHttpsIngress.enabled | default(false) | bool

- name: Show admin password
  tags:
  - user-token
  hosts: initkubmaster
  become: true
  gather_facts: False
  tasks:
  - name: Include vars from vars.yaml
    include_vars:
      file: vars.yaml
  - name: Get admin password
    become: true
    become_user: "{{ kubectl_user }}"
    shell: kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo
    register: dashboard_pass
    when: rook_ceph.dashboard.istioHttpsIngress.enabled | default(false) | bool
  - name: Show login info
    debug:
      msg: "username: admin , pass (WARNING!: SPECIAL CHARS ARE SHOWN ESCAPED!): {{dashboard_pass.stdout}} " 
    when: rook_ceph.dashboard.istioHttpsIngress.enabled | default(false) | bool
  