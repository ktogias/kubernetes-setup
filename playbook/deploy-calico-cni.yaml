---
- name: Prepare hosts for Calico CNI
  tags:
    - prepare
  hosts: kuball
  become: true
  tasks:
  - name: Ensure NetworkManager unmanaged devices configuration file has the proper content
    copy:
      content: |
        [keyfile]
        unmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico
      dest: /etc/NetworkManager/conf.d/calico.conf
    register: nm_unmanaged_config
  - name: Restart NetworkManager after config change
    service:
      name: NetworkManager
      state: restarted
    when: nm_unmanaged_config.changed
  - name: Ensure net.netfilter.nf_conntrack_max is increased
    sysctl:
        name: net.netfilter.nf_conntrack_max
        value: '1000000'
        sysctl_set: yes
        state: present
        reload: yes
      
- name: Deploy Calico CNI
  hosts: initkubmaster
  become: true
  tasks:
  - name: Template Calico manifest
    template:
      src: ../manifests/calico/calico.tmpl.yaml
      dest: "/tmp/calico.yaml"
  - name: Deploy Calico manifest
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl apply -f /tmp/calico.yaml"
    register: calico_deployment_result
  - name: Show calico deployment result
    debug:
      msg: "{{ calico_deployment_result }}"

- name: Verify deployment
  tags:
    - verify
  hosts: initkubmaster
  become: true
  tasks:
  - name: Verify all kube-system pods are in the `Ready` state
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl -n kube-system get pod -o jsonpath='{.items[*].status.containerStatuses[*].ready}'"
    register: kube_system_pods_status
    until: 'kube_system_pods_status.stdout_lines[0] is match("^true\s[true\s]*true$")'
    retries: 10
    delay: 10
  - name: Display kube-system pods state verification output
    debug:
      var: kube_system_pods_status.stdout_lines[0]
  - name: Verify all nodes are in the `Ready` state
    become: true
    become_user: "{{ kubectl_user }}"
    command: "kubectl get nodes -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'"
    register: nodes_status
    until: nodes_status.stdout_lines[0] is not match("Ready=False")
    retries: 10
    delay: 10
  - name: Display nodes state verification output
    debug:
      var: nodes_status.stdout_lines[0]